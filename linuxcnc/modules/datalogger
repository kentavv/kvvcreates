#!/usr/bin/env python

# Copyright 2019 Kent A. Vander Velden <kent.vandervelden@gmail.com>
#
# If you use this software, please consider contacting me. I'd like to hear
# about your work.
#
# This file is part of LinuxCNC-Datalogger
#
#     LinuxCNC-Datalogger is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     LinuxCNC-Datalogger is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with LinuxCNC-Datalogger.  If not, see <https://www.gnu.org/licenses/>.

from __future__ import print_function

import time
import datetime

import hal

import vxi11

# Installing python-vxi11:
# apt install g++ python-serial bc git python-pip python3-pip
# python -m pip install python-vxi11
# python3 -m pip install python-vxi11


f = open('/home/kent/bin/data.txt', 'w')

params = ['xpos', 'ypos', 'zpos', 'xvel', 'yvel', 'zvel', 'spindle-speed-commanded', 'spindle-speed-actual']
print(','.join(['datetime', 'dt'] + params + ['current [A]']), file=f)
h = hal.component("datalogger")
print(dir(h))

h.newpin("enable", hal.HAL_BIT, hal.HAL_IN)
h.newpin("xpos", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("ypos", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("zpos", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("xvel", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("yvel", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("zvel", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("spindle-speed-commanded", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("spindle-speed-actual", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("hour", hal.HAL_U32, hal.HAL_OUT)
h.newpin("minute", hal.HAL_U32, hal.HAL_OUT)
h.newpin("second", hal.HAL_U32, hal.HAL_OUT)
h.newpin("millisecond", hal.HAL_U32, hal.HAL_OUT)


instr = None
if False:
  instr = vxi11.Instrument('192.168.1.70')
  idn = instr.ask('*IDN?')
  print(idn)
  if not idn.startswith('Agilent Technologies,34461A'):
    print('Unknown instrument:', idn)
    sys.exit(1)
  instr.write('*RST')
  #instr.write('CONF:VOLT:DC AUTO,DEF')
  #instr.write('CONF:VOLT:DC 1,0.001')
  instr.write('CONF:VOLT:AC 10,0.001')
  #instr.write('VOLT:AC:BAND 200')
  instr.write('TRIG:DEL .005')

h.ready()

# read n values with a small delay between each reading
def sample(n=1, scale=10.):
  rv = []
  if instr is not None:
    for i in range(n):
      if i > 0:
        time.sleep(.05)
      rv += [instr.ask('READ?')]
    rv = [float(x) * scale for x in rv]
  else:
    rv = [-1.] * n
  return rv

try:
    st = datetime.datetime.now()
    do_once = False
    while True:
        time.sleep(.005)
        t = datetime.datetime.now()
        h['hour'] = t.hour
        h['minute'] = t.minute
        h['second'] = t.second
        h['millisecond'] = int(t.microsecond / 1000)
        if h['enable']:
            dt = datetime.datetime.now()
            t = (dt - st).total_seconds()
            rv = sample()
            row = [str(dt), str(t)] + [str(h[x]) for x in params] + [str(x) for x in rv]
            print(','.join(row), file=f)
            # f.flush()
            do_once = True
        elif do_once:
            do_once = False
            # f.flush()
except KeyboardInterrupt:
    raise SystemExit
