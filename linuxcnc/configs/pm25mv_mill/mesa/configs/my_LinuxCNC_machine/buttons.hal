#I have to say, it is nice to be able to tell your machine how to run instead of having to learn to or get used to running a machine someone else has configured. I am sold on EMC.
#
#In the original post on this thread, I proposed 2 buttons, one a Run/Step and the other a Pause/Resume. The controller I converted from had those 2 buttons close to an e-stop and until a program was proved out, 2 fingers stayed on them.
#
#Thanks to John and Andy, I got my Pause/Resume button. I did a little work on my own and was able to get the Run/Step button (admittedly the far easier). So, for what it's worth, here is the program for both buttons:
#
#This is how they function:
#
#Pressing Run/Step will begin executing a program.
#
#Pressing Hold/Resume while a program is running will pause the program.
#
#Pressing Run/Step while a program is paused will single step the program.
#
#Pressing Hold/Resume while a program is paused will return it to normal run mode.
#
#I hope this thread is of some help to someone.
#
#Frank


## Changes made to incorperate latching alarms


# (The toggle component has debounce by default)

# Pause/Resume Section
net pause-resume-btn                          => and2.a1.in0 and2.a2.in0
net pause-on         halui.program.is-paused  => toggle2nist.0.is-on and2.a1.in1 and2.a4.in1
net run-on           halui.program.is-running => and2.a2.in1 and2.stallwatch-pause.in1
net pause-sig        and2.a1.out              => or2.o1.in0
net resume-sig       and2.a2.out              => or2.o1.in1
net toggle-ok        or2.o1.out               => toggle.0.in
net togglesig        toggle.0.out             => toggle2nist.0.in
net toggleon         toggle2nist.0.on         => or2.pause.in1
net spindle-0-torque-stallwatch               => and2.stallwatch-pause.in0
net stallwatch-pause and2.stallwatch-pause.out => or2.pause.in0


net pause1a          or2.pause.out            => or2.pause2.in0
net                  pendent-pause            => or2.pause2.in1
net pause-in         or2.pause2.out           => halui.program.pause

net resume1a         toggle2nist.0.off        => or2.resume2.in0
net                  pendent-resume           => or2.resume2.in1
net toggleoff        or2.resume2.out          => halui.program.resume


# Run/Step Section
#net run-step-btn and2.a3.in0 and2.a4.in0 <= hm2_7i76e.0.7i76.0.0.input-07 #(this is your input)
net run-step-btn or2.run2.in0
net pendent-run or2.run2.in1
net run-step-btn2 or2.run2.out and2.a3.in0 and2.a4.in0
net idle-on and2.a3.in1 <= halui.program.is-idle
# net pause.on and 2.3.in1 <= halui.program.is-paused
# and2.3.in1 was added in the net pause-on statement in Pause/Resume Section

net run-sig0 and2.a3.out and2.a5.in0
net run-allowed and2.a5.in1
net step-sig0 and2.a4.out and2.a6.in0
net run-allowed and2.a6.in1

net run-sig          and2.a5.out              => halui.mode.auto halui.program.run
net step-sig         and2.a6.out              => halui.program.step

# Stop Section
#net stop-btn <= hm2_7i76e.0.7i76.0.0.input-09-not => halui.program.stop
#net stop-btn => halui.program.stop
net stop-btn => or2.stop.in1

net stop-btn-all or2.stop.out or2.stop2.in0
net pendent-stop or2.stop2.in1

net spindle-0-alarm => or2.stop0.in0
net spindle-1-alarm => or2.stop0.in1

net spindle-alarms or2.stop0.out => or2.stop1.in0
net axes-alarm => or2.stop1.in1

setp debounce.1.delay 5 # 5 * servo-thread period (1000us) = 5ms
net motor-alarm-raw or2.stop1.out debounce.1.0.in
net motor-alarm debounce.1.0.out => estop_latch.fault.fault-in
net fault-latch-loopout estop_latch.fault.fault-out  => or2.stop.in0

#setp estop_latch.fault.ok-in 1
# The following single line should work, but there's a glitch or something at the start that causes a latch to occur
# so we also use the estop-reset to reset the fault latch
#net reset-fault => estop_latch.fault.reset

setp oneshot.start.in 1
setp oneshot.start.width 1
net fault-start-clear oneshot.start.out or2.fault.in0

#net estop-reset or2.fault.in0
net reset-fault or2.fault.in1
net reset-fault2 or2.fault.out estop_latch.fault.reset

#net stop-request or2.stop.out halui.program.stop
# The following is better than halui.program.stop but requires changes to Axis
# detailed in https://forum.linuxcnc.org/21-axis/27585-enable-disable-run-button
# This line must be in a post_gui_hal file, e.g., custom_postgui.hal
#net run-disabled or2.stop.out axisui.run-disable

net run-disable or2.stop2.out oneshot.fault.in or2.hscam-stop.in0 not.run.in
net run-allowed not.run.out 
net stop-requested oneshot.fault.out halui.program.stop
setp oneshot.fault.width .05

